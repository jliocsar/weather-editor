* as fs from node:fs
* as fsp from node:fs/promises
* as path from node:path
{ spawnSync } from child_process

{ Jimp, intToRGBA } from jimp

{ LtxParser, type ParsedLtxSection } from ./ltx-parser.civet
* as Types from ./typedefs.civet
{ clamp, vector3 } from ./utils.civet

export Types

LTX_EXT := '.ltx'
DDS_EXT := '.dds'
PNG_EXT := '.png'
SKY_TEXTURE_PREFIX := 'sky\\'
IS_LINUX := process.platform is "linux"

export class WeatherLtxNormalizer
  colorVector3<T>(value: T)
    unless @isColorVector3 value then return
    return (value.map @zeroToOne) as Types.ColorVector3

  colorVector4<T>(value: T)
    unless @isColorVector4 value then return
    return (value.map @zeroToOne) as Types.ColorVector4

  zeroToThousand<T>(value: T)
    unless @isInteger value then return
    return clamp value, 0, 1000

  zeroToOne<T>(value: T, fractionDigits = 4)
    unless @isFloat value then return
    fixed := Number value.toFixed fractionDigits
    return clamp fixed, 0, 1

  skyTexture<T>(value: T)
    unless @isString value then return
    return value.startsWith SKY_TEXTURE_PREFIX and value or `${SKY_TEXTURE_PREFIX}${value}`

  private isColorVector3(value: any): value is Types.ColorVector3
    return Array.isArray value and value# is 3

  private isColorVector4(value: any): value is Types.ColorVector4
    return Array.isArray value and value# is 4

  private isInteger(value: any): value is number
    return typeof value is 'number' and Number.isInteger value

  private isFloat(value: any): value is number
    return typeof value is 'number' and not Number.isInteger value

  private isString(value: any): value is string
    return typeof value is 'string'

type TIterateResult<TWeatherName extends Types.WeatherName> =
  weatherName: TWeatherName
  weather: Partial<ParsedLtxSection>

type TWeatherEditorArgs =
  root: string
  debug?: boolean
  skyTexturesRoot?: string

type NormalizerMap = {
  [Key in keyof Types.WeatherDefinition]?: keyof WeatherLtxNormalizer
}

type TPatchArgs<TWeatherName extends Types.WeatherName, TTimeRange extends Types.WeatherTimeRange> =
  weatherName: TWeatherName
  with: (def: Types.WeatherDefinition, time: Types.WeatherTime) => void
  timeRange?: TTimeRange

export class WeatherEditor
  private readonly root: string
  private readonly debug: boolean
  private readonly skyTexturesRoot: string
  private readonly weathersDirPath: string
  private readonly ltxParser: LtxParser
  private readonly normalizer: WeatherLtxNormalizer
  private readonly skyTextureAvgColorCache = {}
  private readonly normalizeMap: NormalizerMap = {
    ambient_color: 'colorVector3'
    clouds_color: 'colorVector4'
    far_plane: 'zeroToThousand'
    fog_color: 'colorVector3'
    fog_density: 'zeroToOne'
    fog_distance: 'zeroToThousand'
    hemisphere_color: 'colorVector4'
    rain_color: 'colorVector3'
    rain_density: 'zeroToOne'
    sky_color: 'colorVector3'
    sky_rotation: 'zeroToOne'
    sky_texture: 'skyTexture'
    sun_color: 'colorVector3'
    sun_shafts_intensity: 'zeroToOne'
    water_intensity: 'zeroToOne'
  }

  @(args: TWeatherEditorArgs)
    @root = args.root
    @debug = args.debug
    @skyTexturesRoot = args.skyTexturesRoot ?? path.join @root, 'gamedata', 'textures', 'sky'
    @ltxParser = new LtxParser
    @weathersDirPath := path.join @root, 'gamedata', 'configs', 'environment', 'weathers'
    @normalizer := new WeatherLtxNormalizer

  createMediumVersion(idx: string, baseName: string, baseContent: string)
    medium := `${baseName}_medium${idx}`
    mediumPath := path.join @weathersDirPath, `${medium}${LTX_EXT}`

    if fs.existsSync mediumPath
      throw new Error `Medium weather file already exists: ${mediumPath}`

    fs.writeFileSync mediumPath, baseContent

  createStrongVersion(idx: string, baseName: string, baseContent: string)
    strong := `${baseName}_strong${idx}`
    strongPath := path.join @weathersDirPath, `${strong}${LTX_EXT}`

    if fs.existsSync strongPath
      throw new Error `Strong weather file already exists: ${strongPath}`

    fs.writeFileSync strongPath, baseContent

  /**
   * Creates the `_medium` and `_strong` versions of the weather file
   */
  createMediumAndStrongVersions(weatherName: string)
    nameParts := weatherName.match /(.*)(\d+)$/

    unless nameParts
      throw new Error `Invalid weather name: ${weatherName}`

    base := path.join @weathersDirPath, `${weatherName}${LTX_EXT}`
    baseContent := fs.readFileSync base, 'utf8'
    [, baseName, idx] := nameParts

    @createMediumVersion idx, baseName, baseContent
    @createStrongVersion idx, baseName, baseContent

  /**
   * Get the average color of the sky texture
   */
  getSkyTextureAvgColor(skyTextureName: string)
    unless fs.existsSync @skyTexturesRoot
      throw new Error `Sky textures root not found: ${@skyTexturesRoot}`

    unless skyTextureName return
    return new Promise<ReturnType<typeof vector3>> (resolve, reject) =>
      skyTextureName = skyTextureName.replace SKY_TEXTURE_PREFIX, ''

      if @skyTextureAvgColorCache[skyTextureName]
        return resolve @skyTextureAvgColorCache[skyTextureName]
      
      skyTexturesRoot := @skyTexturesRoot
      skyTexturePath := path.join skyTexturesRoot, `${skyTextureName}${DDS_EXT}`
      unless fs.existsSync skyTexturePath
        throw new Error `Sky texture not found: ${skyTexturePath}`

      pngPath := skyTexturePath.replace DDS_EXT, PNG_EXT
      unless fs.existsSync pngPath
        magick := IS_LINUX ? './magick' : 'magick'
        spawnSync magick, [skyTexturePath, pngPath], { stdio: 'inherit' }

      try
        // We only use the first image for now
        firstImage := skyTexturePath.replace DDS_EXT, `-0${PNG_EXT}`
        buffer := await fsp.readFile firstImage
        image := await Jimp.read buffer
        { width, height } := image.bitmap
        // For now we're grabbing the pixel from the middle bottom, which is essentially the color that the game uses
        // to create that skybox/cubemap thing idk the name
        x := Math.floor width / 2
        y := height - 1
        { r, g, b } := intToRGBA image.getPixelColor x, y
        // Format the vector to the engine format (color / 255)
        colors := vector3(r, g, b).normalize()
        @skyTextureAvgColorCache[skyTextureName] = colors
        return resolve colors
      catch error
        return reject error

  /**
   * Clean up the sky textures directory after getting the average colors
   */
  cleanUpSkyTextures(dirPath = @skyTexturesRoot)
    unless fs.existsSync @skyTexturesRoot
      throw new Error `Sky textures root not found: ${@skyTexturesRoot}`
    try
      files := fs.readdirSync dirPath
      for file of files
        filePath := path.join dirPath, file
        if fs.statSync(filePath).isDirectory()
          @cleanUpSkyTextures filePath
        else if (file.endsWith PNG_EXT) and (fs.existsSync filePath)
          fs.unlinkSync filePath
    catch _error

  /**
   * Patch the weather files with the given iterator callback
   */
  patch<TWeatherName extends Types.WeatherName, TTimeRange extends Types.WeatherTimeRange>(args: TPatchArgs<TWeatherName, TTimeRange>)
    { weatherName, timeRange, with: iteratorCb } := args

    // A patch is only for a single weather file
    @iterateOver weatherName, (def, time) =>
      // Already filter the time range in here
      // If no time range is passed then just don't filter them
      if timeRange and not @inTimeRange time, timeRange then return
      console.info 'Running for', weatherName, '|', time

      normalizeMapEntries := Object.entries @normalizeMap

      // Run the `with` patch function
      iteratorCb def, time

      // Normalize the values so that they're within their min/max ranges etc.
      for [key, normalizer] of normalizeMapEntries
        value := def[key]
        if value is not undefined
          def[key] = @normalizer[normalizer] def[key]
          if def[key] is undefined
            throw new Error `Normalizer "${normalizer}" returned undefined for "${key}"`
    |> await
    |> @writeIterateResultToWeatherFile

  /**
   * Fetch all weather names from the weathers directory
   */
  fetchAllWeathersNames()
    length := LTX_EXT.length
    return fs.readdirSync @weathersDirPath
      .filter .endsWith LTX_EXT
      .map .slice 0, -length

  /**
   * Iterate over the weather file and run the iterator callback
   */
  iterateOver<TWeatherName extends Types.WeatherName>(weatherName: TWeatherName, iteratorCb: (def: Types.WeatherDefinition, time: string) => any): TIterateResult<TWeatherName>
    weather := await @parseLtxFile weatherName
    node .= weather
    while node
      if 'section' in node
        await iteratorCb node.entries as Types.WeatherDefinition, node.section
      node = node.next
    return {
      weatherName,
      weather,
    }

  /**
   * Check if the time is within the time range
   */
  private inTimeRange(time: Types.WeatherTime, range: Types.WeatherTimeRange)
    [timeHour, timeMinute] := time |> .split ':' |> .map Number
    [[rangeStartHour, rangeStartMinute], [rangeEndHour, rangeEndMinute]] := range.map (rangeTime) => {
      [hour, minute] := rangeTime.split ':'
      return [(Number hour), (Number minute)]
    }
    if timeHour < rangeStartHour or timeHour > rangeEndHour
      return false
    if timeHour is rangeStartHour and timeMinute < rangeStartMinute
      return false
    if timeHour is rangeEndHour and timeMinute > rangeEndMinute
      return false
    return true

  /**
   * Write the iterate result to the weather file
   */
  private writeIterateResultToWeatherFile<TWeatherName extends Types.WeatherName>({ weatherName, weather }: TIterateResult<TWeatherName>)
    weatherFilePath := path.join @weathersDirPath, `${weatherName}${LTX_EXT}`
    formatted := @ltxParser.format weather
    unless @debug
      fs.writeFileSync weatherFilePath, formatted

  /**
   * Parse the LTX file and return the parsed object
   */
  private parseLtxFile<TWeatherName extends Types.WeatherName>(weatherName: TWeatherName)
    weatherFilePath := path.join @weathersDirPath, `${weatherName}${LTX_EXT}`
    return @ltxParser.parse weatherFilePath

